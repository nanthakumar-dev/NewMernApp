import { createSlice } from "@reduxjs/toolkit";

const initialState={
    loading:false,
    order:[],
    userOrder:[]
}
const orderSlice=createSlice({
    name:"order",
    initialState,
    reducers:{
        createOrderRequest(state,action){
            return{
                ...state,
                loading:true
            }
        },
        createOrderSuccess(state,action){
            return{
                ...state,
                loading:true,
                order:action.payload.order
            }
        },
        createOrderFail(state,action){
            return{
                loading:true,
                error:action.payload
            }
        },
        myOrderRequest(state,action){
            return{
                ...state,
                loading:true
            }
        },
        myOrderSuccess(state,action){
            return{
                ...state,
                loading:true,
                userOrder:action.payload.order
            }
        },
        myOrderFail(state,action){
            return{
                loading:true,
                error:action.payload
            }
        },
        orderDetailRequest(state,action){
            return{
                ...state,
                loading:true
            }
        },
        orderDetailSuccess(state,action){
            return{
                ...state,
                loading:true,
                orderDetail:action.payload.order
            }
        },
        orderDetailFail(state,action){
            return{
                loading:true,
                error:action.payload
            }
        },
        adminGetRequest(state,action){
            return{
                ...state,
                loading:true
            }
        },
        adminGetSuccess(state,action){
            return{
                ...state,
                loading:true,
                order:action.payload.order
            }
        },
        adminGetFail(state,action){
            return{
                loading:true,
                error:action.payload
            }
        },
        adminDeleteOrderRequest(state,action){
            return{
                ...state,
                loading:true,
                isOrderDeleted:false
            }
        },
        adminDeleteOrderSuccess(state,action){
            return{
                ...state,
                loading:true,
                isOrderDeleted:true
            }
        },
        adminDeleteOrderFail(state,action){
            return{
                loading:true,
                error:action.payload
            }
        },
        adminUpdateOrderRequest(state,action){
            return{
                ...state,
                loading:true,
                isOrderUpdated:false
            }
        },
        adminUpdateOrderSuccess(state,action){
            return{
                ...state,
                loading:true,
                isOrderUpdated:true
            }
        },
        adminUpdateOrderFail(state,action){
            return{
                loading:true,
                error:action.payload
            }
        },
        isOrderUpdatedClear(state,action){
            return{
                ...state,
                isOrderUpdated:false
            }
        },
        isOrderDeletedClear(state,action){
            return{
                ...state,
                isOrderDeleted:false
            }
        },
        errorClear(state,action){
            return{
                ...state,
                error:null
            }
        },
    }
})
const {actions,reducer}=orderSlice

export const {
    createOrderRequest,createOrderSuccess,createOrderFail,myOrderRequest,myOrderFail,myOrderSuccess,
    orderDetailRequest,orderDetailSuccess,orderDetailFail,adminGetRequest,adminGetSuccess,adminGetFail,
    adminDeleteOrderRequest,adminDeleteOrderSuccess,adminDeleteOrderFail,adminUpdateOrderRequest,
    adminUpdateOrderSuccess,adminUpdateOrderFail,isOrderDeletedClear,isOrderUpdatedClear,errorClear
    
}=actions

export default reducer