import {createSlice} from "@reduxjs/toolkit"

const initialState={
    loading:true,
    isAuthenticated:false
}

const authSlice = createSlice({
    name:"auth",
    initialState,
    reducers:{
        loginRequest(state,action){
            return{
                ...state,
                loading:true,
            }
        },
        loginSuccess(state,action){
            return{
                loading:false,
                isAuthenticated:true,
                user:action.payload.user
            }
        },
        loginFail(state,action){
            return{
                ...state,
                loading:false,
                error:action.payload
            }
        },
        registerRequest(state,action){
            return{
                ...state,
                loading:true,
            }
        },
        registerSuccess(state,action){
            return{
                loading:false,
                isAuthenticated:true,
                user:action.payload.user
            }
        },
        registerFail(state,action){
            return{
                ...state,
                loading:false,
                error:action.payload
            }
        },
        logoutRequest(state,action){
            return{
                ...state,
                loading:true,
            }
        },
       logoutSuccess(state,action){
            return{
                loading:false,
                isAuthenticated:false
            }
        },
        logoutFail(state,action){
            return{
                ...state,
                loading:false,
                error:action.payload
            }
        },
        loadUserRequest(state,action){
            return{
                ...state,
                loading:true,
            }
        },
       loadUserSuccess(state,action){
            return{
                loading:false,
                isAuthenticated:true,
                user:action.payload.user
            }
        },
        loadUserFail(state,action){
            return{
                ...state,
                loading:false,
            }
        },
        changePasswordRequest(state,action){
            return{
                ...state,
                loading:true,
                isUpdated:false,
            }
        },
        changePasswordSuccess(state,action){
            return{
                ...state,
                loading:false,
                isUpdated:true
            }
        },
        changePasswordFail(state,action){
            return{
                ...state,
                loading:false,
                error:action.payload
            }
        },
        updateProfileRequest(state,action){
            return{
                ...state,
                loading:true,
                isUpdated:false,
            }
        },
        updateProfileSuccess(state,action){
            return{
                ...state,
                loading:false,
                isUpdated:true,
                user:action.payload.user
            }
        },
        updateProfileFail(state,action){
            return{
                ...state,
                loading:false,
                error:action.payload
            }
        },
        forgotPasswordRequest(state,action){
            return{
                ...state,
                loading:true,
                message:null
            }
        },
        forgotPasswordSuccess(state,action){
            return{
                ...state,
                loading:false,
                message:action.payload.message
            }
        },
        forgotPasswordFail(state,action){
            return{
                ...state,
                loading:false,
                error:action.payload
            }
        },
        resetPasswordRequest(state,action){
            return{
                ...state,
                loading:true,
                isAuthenticated:false
            }
        },
        resetPasswordSuccess(state,action){
            return{
                ...state,
                loading:false,
                isAuthenticated:true,
                user:action.payload.user
            }
        },
        resetPasswordFail(state,action){
            return{
                ...state,
                loading:false,
                error:action.payload
            }
        },
        isUpdatedFalse(state,action){
            return{
                ...state,
                isUpdated:false
            }
        },
        isMessageFalse(state,action){
            return{
                ...state,
                message:null
            }
        },
        clearAuthError(state,action){
            return{
                ...state,
                loading:false,
                error:null
            }
        },
    }
})

const {actions,reducer} = authSlice
export const {
    loginRequest,loginSuccess,loginFail,clearAuthError,registerRequest,registerSuccess,registerFail,
    logoutRequest,logoutSuccess,logoutFail,loadUserRequest,loadUserSuccess,loadUserFail,
    changePasswordRequest,changePasswordSuccess,changePasswordFail,updateProfileRequest,
    updateProfileSuccess,updateProfileFail,forgotPasswordRequest,forgotPasswordSuccess,forgotPasswordFail,
    resetPasswordRequest,resetPasswordSuccess,resetPasswordFail,isUpdatedFalse,isMessageFalse
    
    }=actions
export default reducer